using System;
using System.Text;
using System.Threading.Tasks;
using Incoding.CQRS;
using Incoding.Data;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.IdentityModel.Tokens;
using Operations.Entities;
using Operations.Queries;
using PogaWebApi.Exceptions;

namespace PogaWebApi
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        public void ConfigureServices(IServiceCollection services)
        {
            services
                .AddMvc()
                .SetCompatibilityVersion(CompatibilityVersion.Version_2_1);

            services.AddSingleton(_ => Configuration);
            services.AddScoped<DbContext>(optionsAction => new BaseDbContext<User>(builder => builder.UseSqlServer(Configuration["ConnectionString"])));
            services.AddScoped<IEntityFrameworkSessionFactory, EntityFrameworkSessionFactory>();
            services.AddScoped<IUnitOfWorkFactory, EntityFrameworkUnitOfWorkFactory>();
            services.AddTransient<IDispatcher, DefaultDispatcher>();

            var key = Guid.NewGuid().ToString();
            Configuration["jwt_secret"] = key;
            services.AddAuthentication(x =>
                {
                    x.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                    x.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
                })
                .AddJwtBearer(x =>
                {
                    x.Events = new JwtBearerEvents
                    {
                        OnTokenValidated = context =>
                        {
                            var dispatcher = context.HttpContext.RequestServices.GetRequiredService<IDispatcher>();
                            var userId = int.Parse(context.Principal.Identity.Name);
                            var user = dispatcher.Query(new GetUserByIdQuery {Id = userId});
                            if (user == null)
                                context.Fail("Unauthorized");

                            return Task.CompletedTask;
                        }
                    };
                    x.RequireHttpsMetadata = false;
                    x.SaveToken = true;
                    x.TokenValidationParameters = new TokenValidationParameters
                    {
                        ValidateIssuerSigningKey = true,
                        IssuerSigningKey = new SymmetricSecurityKey(Encoding.ASCII.GetBytes(key)),
                        ValidateIssuer = false,
                        ValidateAudience = false
                    };
                });
        }

        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseHsts();
            }
            
            app.UseAuthentication();
            app.UseHttpsRedirection();
            app.ConfigureExceptionHandler();
            app.UseMvc();
        }
    }
}
